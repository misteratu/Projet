with Ada.Strings;               use Ada.Strings;	
with Ada.Text_IO;               use Ada.Text_IO;
with Ada.Integer_Text_IO;       use Ada.Integer_Text_IO;
with Ada.Strings.Unbounded;     use Ada.Strings.Unbounded;
with Ada.Text_IO.Unbounded_IO;  use Ada.Text_IO.Unbounded_IO;
with Ada.Command_Line;          use Ada.Command_Line;
with Cache;
package body exploitation_table_routage is

    procedure Table_routage(table_routage : out T_Cache) is

        Nom_Entree : Unbounded_String;
        Entree : File_Type;	-- Le descripteur du ficher d'entrée
        ligne : string;
    begin
        if Argument_Count /= 1 then
            Put("usage : " & Command_Name & " <fichier>");
        else
            Nom_Entree := To_Unbounded_String (Argument (1));
            Open (Entree, In_File, To_String (Nom_Entree));
            begin
                loop   
                    ligne := Get_Line (Entree); 
                    Trim (ligne, Both);
                    if Est_vide(table_routage) then
                        liste := new T_Cellule'(lire_ligne (ligne).all.Destination, lire_ligne (ligne).all.Masque, lire_ligne (ligne).all.Eth, null);
                    else
                        table_routage.all.Destination := lire_ligne (ligne).all.Destination;
                        table_routage.all.Masque := lire_ligne (ligne).all.Masque;
                        table_routage.all.Eth := lire_ligne (ligne).all.Eth;
                        exit when End_Of_File (Entree);
                    end if;
                end loop;
            end;
            Close (Entree);

        end if;
    exception
        when E : others =>
            Put_Line (Exception_Message (E));
    end Table_routage;


    function lire_ligne (ligne : in string) return T_Cache is 
        donnee : T_Cache;
        bit : string;
        indice_point : Integer;
        Nb_point_parcourus : Integer;
        Bit1 : Integer;
        Bit2 : Integer;
        Bit3 : Integer;
        Bit4 : Integer;
        Bit5 : Integer;
        Bit6 : Integer;
        Bit7 : Integer;
        Bit8 : Integer;
        Bit9 : Integer;
    begin
        indice_point := 0;
        Nb_point_parcourus := 0;
        for i in 1..Length(ligne) loop
            if ligne(i) = '.' then 
                bit(1..(i-(indice_point + 1))) := ligne((indice_point + 1)..i); 
                case Nb_point_parcourus is
                    when 0 =>
                        Bit1 := Integer'Value(bit(1..Length(bit)));
                    when 1 =>
                        Bit2 := Integer'Value(bit(1..Length(bit)));
                    when 2 =>
                        Bit3 := Integer'Value(bit(1..Length(bit)));
                    when 3 =>
                        Bit4 := Integer'Value(bit(1..Length(bit)));
                    when 4 =>
                        Bit5 := Integer'Value(bit(1..Length(bit)));
                    when 5 =>
                        Bit6 := Integer'Value(bit(1..Length(bit)));
                    when 6 =>
                        Bit7 := Integer'Value(bit(1..Length(bit)));
                    when 7 =>
                        Bit8 := Integer'Value(bit(1..Length(bit)));
                    when 8 =>
                        Bit9 := bit(1..Length(bit));
                    when others =>
                        Put("Problème dans le fichier de la table de routage : nombre de points trop important");
                        exit;
                end case;
                Nb_point_parcourus := Nb_point_parcourus + 1;
                indice_point := i;
                bit := Character'Val(0);
                    
            elsif ligne(i) = ' ' then
                if ligne(i-1) = ' ' then
                    indice_point := indice_point + 1;
                else 
                    bit(1..(i-(indice_point + 1)-1)) := ligne((indice_point + 1)..i-1);  
                    case Nb_point_parcourus is
                        when 0 =>
                            Bit1 := Integer'Value(bit(1..Length(bit)));
                        when 1 =>
                            Bit2 := Integer'Value(bit(1..Length(bit)));
                        when 2 =>
                            Bit3 := Integer'Value(bit(1..Length(bit)));
                        when 3 =>
                            Bit4 := Integer'Value(bit(1..Length(bit)));
                        when 4 =>
                            Bit5 := Integer'Value(bit(1..Length(bit)));
                        when 5 =>
                            Bit6 := Integer'Value(bit(1..Length(bit)));
                        when 6 =>
                            Bit7 := Integer'Value(bit(1..Length(bit)));
                        when 7 =>
                            Bit8 := Integer'Value(bit(1..Length(bit)));
                        when 8 =>
                            Bit9 := bit(1..Length(bit));
                        when others =>
                            Put("Problème dans le fichier de la table de routage : nombre de points trop important");
                            exit;
                    end case;
                    indice_point := indice_point + 1;
                end if;     
            else
                null;
            end if;
        end loop;
        donnee := new T_Cellule'(((Bit1 * 256 + Bit2) * 256 + Bit3) * 256 + Bit4, ((Bit5 * 256 + Bit6) * 256 + Bit7) * 256 + Bit8, Bit9);
        return donnee;
    end lire_ligne;


end exploitation_table_routage;